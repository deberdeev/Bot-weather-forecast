import telebot
import requests
from telebot import types
import aiosqlite
import asyncio
import logging
from dotenv import load_dotenv
import os

logging.basicConfig(level=logging.INFO)

load_dotenv()
bot = telebot.TeleBot(os.getenv('TOKEN'))

user_history = {}
cities = ["–¢–æ–∫–∏–æ", "–£—Ö–∞–Ω—å", "–¢—è–Ω—å—Ü–∑–∏–Ω—å", "–ú–æ—Å–∫–≤–∞", "–ú—É–º–±–∞–∏", "–õ–∞—Ö–æ—Ä",
    "–°–∞–Ω-–ü–∞—É–ª—É", "–î–∂–∞–∫–∞—Ä—Ç–∞", "–î—É–Ω–≥—É–∞–Ω—å", "–î–∞–∫–∫–∞", "–•–∞–π–¥–∞—Ä–∞–±–∞–¥",
    "–•–∞–Ω—á–∂–æ—É", "–ß–µ–Ω–Ω–∞–∏", "–õ–∏–º–∞", "–û–ö–†–£–ì –ö–û–õ–£–ú–ë–ò–Ø"]

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞\n"
        "/history ‚Äî –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞\n"
        "/help ‚Äî –≤—ã–≤–æ–¥ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É."
    )
    bot.send_message(message.from_user.id, help_text)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add(types.KeyboardButton('/start'))
    markup.add(types.KeyboardButton('/help'))
    markup.add(types.KeyboardButton('/history'))
    markup.add(types.KeyboardButton('15 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –º–∏—Ä–∞'))
    # markup.add(types.KeyboardButton('/forecast'))

    bot.send_message(message.from_user.id,
                     f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –≠—Ç–æ –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.'
                     f'\n–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ 15-—Ç–∏ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –º–∏—Ä–∞, '
                     f'–∏ –æ–Ω —Å–∫–∞–∂–µ—Ç, –∫–∞–∫–∞—è —Ç–∞–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –∫–∞–∫ –æ–Ω–∞ –æ—â—É—â–∞–µ—Ç—Å—è!',
                     reply_markup=markup)

@bot.message_handler(commands=['history'])
def history(message):
    user_id = message.from_user.id
    history_records = asyncio.run(get_history(user_id))
    if history_records:
        history_text = '\n'.join([f"{record[0]} - {record[1][:10]}" for record in history_records])
        bot.send_message(user_id, f'–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n{history_text}')
    else:
        bot.send_message(user_id, '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.')

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == '15 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –º–∏—Ä–∞':
        cities_list = '\n'.join(cities)
        bot.send_message(message.from_user.id, f'–°–ø–∏—Å–æ–∫ 15 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –º–∏—Ä–∞:\n{cities_list}')
    else:
        weather(message)

def weather(message):
    city = message.text.strip().upper()
    user_id = message.from_user.id
    asyncio.run(add_to_history(user_id, city))
    if user_id not in user_history:
        user_history[user_id] = []
    user_history[user_id].append(city)

    url = (f'https://api.openweathermap.org/data/2.5/weather?q={city}'
         f'&units=metric&lang=ru&appid=79d1ca96933b0328e1c7e3e7a26cb347')
    response = requests.get(url)
    data = response.json()

    if response.status_code == 200:
        temperature = round(data['main']['temp'])
        temperature_feels = round(data['main']['feels_like'])
        w_now = f'–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {city} ' + str(temperature) + ' ¬∞C'
        w_feels = '–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ' + str(temperature_feels) + ' ¬∞C'
        bot.send_message(message.from_user.id, w_now)
        lat = data['coord']['lat']
        lon = data['coord']['lon']
        forecast_url = (f'https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}'
                        f'&exclude=current,minutely,hourly,alerts&units=metric&lang=ru&appid=79d1ca96933b0328e1c7e3e7a26cb347')
        forecast_response = requests.get(forecast_url)
        forecast_data = forecast_response.json()

        if temperature < 5:
          bot.send_message(message.from_user.id, '–•–æ–ª–æ–¥–Ω–æ ü•∂')
        elif temperature < 10:
          bot.send_message(message.from_user.id, '–ù–æ—Ä–º–∞–ª—å–Ω–æ üôÇ')
        elif temperature < 20:
          bot.send_message(message.from_user.id, '–¢–µ–ø–ª–æ ‚ò∫Ô∏è')
        elif temperature < 60:
          bot.send_message(message.from_user.id, '–ñ–∞—Ä–∫–æ ü•µ')
        bot.send_message(message.from_user.id, w_feels)
        wind_speed = round(data['wind']['speed'])

        if wind_speed < 5:
          bot.send_message(message.from_user.id, '‚úÖ –ü–æ–≥–æ–¥–∞ —Ö–æ—Ä–æ—à–∞—è, –≤–µ—Ç—Ä–∞ –ø–æ—á—Ç–∏ –Ω–µ—Ç.')
        elif wind_speed < 10:
          bot.send_message(message.from_user.id, 'üå¨Ô∏è –ù–∞ —É–ª–∏—Ü–µ –≤–µ—Ç—Ä–µ–Ω–æ.')
        elif wind_speed < 20:
          bot.send_message(message.from_user.id, 'üåÄ –í–µ—Ç–µ—Ä –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, –≤—ã—Ö–æ–¥—è –∏–∑ –¥–æ–º–∞!')
        else:
          bot.send_message(message.from_user.id, 'üå™Ô∏è –ù–∞ —É–ª–∏—Ü–µ —à—Ç–æ—Ä–º, –Ω–∞ —É–ª–∏—Ü—É –ª—É—á—à–µ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å!')
    else:
        bot.send_message(message.from_user.id, '–ì–æ—Ä–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ!')

    if forecast_response.status_code == 200:
        forecast_text = "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π:\n"
        for day in forecast_data['daily'][:7]:
            day_temp = round(day['temp']['day'])
            day_feels_like = round(day['feels_like']['day'])
            weather_description = day['weather'][0]['description']
            forecast_text += (f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day_temp} ¬∞C, "
                              f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {day_feels_like} ¬∞C, "
                              f"–ü–æ–≥–æ–¥–∞: {weather_description}\n")
        bot.send_message(message.from_user.id, forecast_text)
    else:
        bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 7 –¥–Ω–µ–π.')


DATABASE = 'weather_bot.db'

async def init_db():
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS history (
                  user_id INTEGER, city TEXT, date TEXT)''')
        await db.commit()

async def add_to_history(user_id, city):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute('INSERT INTO history (user_id, city, date) '
                         'VALUES (?, ?, datetime("now"))', (user_id, city))
        await db.commit()

async def get_history(user_id, date=None):
    async with aiosqlite.connect(DATABASE) as db:
        if date:
            cursor = await db.execute('SELECT city, date FROM history WHERE user_id = ? AND date(date) = ?',
                                      (user_id, date))
        else:
            cursor = await db.execute('SELECT city, date FROM history WHERE user_id = ?', (user_id,))
        rows = await cursor.fetchall()
        return rows

if __name__ == '__main__':
    asyncio.run(init_db())
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as exc:
            logging.error(f'Exception occurred: {exc}')


# @bot.message_handler(commands=['forecast'])
# def handle_forecast(message):
#     city = message.text.strip().upper()
#     user_id = message.from_user.id
#     asyncio.run(add_to_history(user_id, city))
#     if user_id not in user_history:
#         user_history[user_id] = []
#     user_history[user_id].append(city)

#     url = (f'https://api.openweathermap.org/data/2.5/weather?q={city}'
#            f'&units=metric&lang=ru&appid=79d1ca96933b0328e1c7e3e7a26cb347')
#     response = requests.get(url)
#     data = response.json()

#     if response.status_code == 200:
#         lat = data['coord']['lat']
#         lon = data['coord']['lon']
#         forecast_url = (f'https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}'
#                         f'&exclude=current,minutely,hourly,alerts&units=metric&lang=ru&appid=79d1ca96933b0328e1c7e3e7a26cb347')
#         forecast_response = requests.get(forecast_url)
#         forecast_data = forecast_response.json()

#         if forecast_response.status_code == 200:
#             forecast_text = "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π:\n"
#             for day in forecast_data['daily'][:7]:
#                 day_temp = round(day['temp']['day'])
#                 day_feels_like = round(day['feels_like']['day'])
#                 weather_description = day['weather'][0]['description']
#                 forecast_text += (f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day_temp} ¬∞C, "
#                                   f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {day_feels_like} ¬∞C, "
#                                   f"–ü–æ–≥–æ–¥–∞: {weather_description}\n")
#             bot.send_message(message.from_user.id, forecast_text)
#         else:
#             bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 7 –¥–Ω–µ–π.')
#     else:
#         bot.send_message(message.from_user.id, '–ì–æ—Ä–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ!')